import os
import re
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
import gzip


@dataclass
class GenomeData:
    """Container for personal genome data"""
    rsid: str
    chromosome: str
    position: int
    genotype: str


class GenomeReader:
    """Reads and processes personal genome data files (23andMe format)"""
    
    def __init__(self):
        self.genome_data: Dict[str, GenomeData] = {}
        self.metadata: Dict[str, str] = {}
        
    def read_23andme_file(self, filepath: str) -> Dict[str, GenomeData]:
        """
        Read a 23andMe genome file
        Supports both .txt and .txt.gz formats
        """
        self.genome_data.clear()
        self.metadata.clear()
        
        # Determine if file is gzipped
        open_func = gzip.open if filepath.endswith('.gz') else open
        mode = 'rt' if filepath.endswith('.gz') else 'r'
        
        try:
            with open_func(filepath, mode, encoding='utf-8', errors='ignore') as f:
                for line in f:
                    line = line.strip()
                    
                    # Skip empty lines
                    if not line:
                        continue
                        
                    # Process metadata comments
                    if line.startswith('#'):
                        self._process_metadata(line)
                        continue
                    
                    # Process SNP data
                    parts = line.split('\t')
                    if len(parts) >= 4:
                        rsid = parts[0].upper()
                        chromosome = parts[1]
                        position = int(parts[2]) if parts[2].isdigit() else 0
                        genotype = parts[3].upper()
                        
                        # Clean genotype (handle special cases)
                        genotype = self._clean_genotype(genotype)
                        
                        # Store the SNP data
                        if rsid.startswith('RS') or rsid.startswith('I'):
                            self.genome_data[rsid] = GenomeData(
                                rsid=rsid,
                                chromosome=chromosome,
                                position=position,
                                genotype=genotype
                            )
                            
        except Exception as e:
            raise Exception(f"Error reading genome file: {str(e)}")
            
        return self.genome_data
        
    def _process_metadata(self, line: str):
        """Process metadata from comment lines"""
        if 'This data file generated by 23andMe' in line:
            self.metadata['source'] = '23andMe'
        elif 'genome build' in line.lower():
            match = re.search(r'build\s+(\d+)', line, re.IGNORECASE)
            if match:
                self.metadata['build'] = match.group(1)
        elif 'generated' in line.lower():
            self.metadata['generated'] = line
            
    def _clean_genotype(self, genotype: str) -> str:
        """Clean and standardize genotype format"""
        # Remove any non-letter characters
        genotype = re.sub(r'[^ACGT\-ID]', '', genotype.upper())
        
        # Handle special cases
        if genotype in ['--', 'DD', 'II']:
            return '--'  # No call
        elif len(genotype) == 1:
            return genotype + genotype  # Homozygous
        elif len(genotype) > 2:
            return genotype[:2]  # Take first two bases
            
        return genotype
        
    def get_snp(self, rsid: str) -> Optional[GenomeData]:
        """Get a specific SNP by rsid"""
        rsid = rsid.upper()
        if not rsid.startswith('RS') and not rsid.startswith('I'):
            rsid = 'RS' + rsid
        return self.genome_data.get(rsid)
        
    def get_genotype(self, rsid: str) -> Optional[str]:
        """Get just the genotype for a specific SNP"""
        snp = self.get_snp(rsid)
        return snp.genotype if snp else None
        
    def get_stats(self) -> Dict:
        """Get statistics about the loaded genome"""
        stats = {
            'total_snps': len(self.genome_data),
            'rs_snps': sum(1 for rsid in self.genome_data if rsid.startswith('RS')),
            'i_snps': sum(1 for rsid in self.genome_data if rsid.startswith('I')),
            'no_calls': sum(1 for snp in self.genome_data.values() if snp.genotype == '--'),
            'metadata': self.metadata
        }
        
        # Chromosome distribution
        chr_counts = {}
        for snp in self.genome_data.values():
            chr_counts[snp.chromosome] = chr_counts.get(snp.chromosome, 0) + 1
        stats['chromosomes'] = chr_counts
        
        return stats
        
    def filter_by_chromosome(self, chromosome: str) -> Dict[str, GenomeData]:
        """Get all SNPs from a specific chromosome"""
        return {
            rsid: snp for rsid, snp in self.genome_data.items()
            if snp.chromosome == str(chromosome)
        }
        
    def get_common_snps(self, rsid_list: List[str]) -> Dict[str, GenomeData]:
        """Get SNPs that are in both the genome and the provided list"""
        common = {}
        for rsid in rsid_list:
            rsid = rsid.upper()
            if rsid in self.genome_data:
                common[rsid] = self.genome_data[rsid]
        return common


if __name__ == "__main__":
    # Example usage
    reader = GenomeReader()
    
    # Check if example file exists in parent directory
    example_files = [
        "../genome_John_Doe_v5_Full_20240101010101.txt",
        "../genome.txt",
        "../23andme.txt"
    ]
    
    for test_file in example_files:
        if os.path.exists(test_file):
            print(f"Reading genome file: {test_file}")
            genome_data = reader.read_23andme_file(test_file)
            
            stats = reader.get_stats()
            print(f"\nGenome Statistics:")
            print(f"  Total SNPs: {stats['total_snps']}")
            print(f"  RS SNPs: {stats['rs_snps']}")
            print(f"  I SNPs: {stats['i_snps']}")
            print(f"  No calls: {stats['no_calls']}")
            print(f"  Source: {stats['metadata'].get('source', 'Unknown')}")
            print(f"  Build: {stats['metadata'].get('build', 'Unknown')}")
            
            # Example: Get a specific SNP
            test_rsid = "Rs53576"
            snp = reader.get_snp(test_rsid)
            if snp:
                print(f"\n{test_rsid}: {snp.genotype} (Chr{snp.chromosome}:{snp.position})")
            break
    else:
        print("No example genome file found. Usage:")
        print("  reader = GenomeReader()")
        print("  genome_data = reader.read_23andme_file('your_genome_file.txt')")
        print("  genotype = reader.get_genotype('Rs53576')")